{
  
    
        "post0": {
            "title": "Python",
            "content": "print(&quot;Hello World!&quot;) . Hello World! .",
            "url": "https://lwu1822.github.io/CSP-fastpages/python/2022/09/06/python.html",
            "relUrl": "/python/2022/09/06/python.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Dictionary",
            "content": "Variables belong to a certain data type. Examples that we have seen before include: int, string, and bool. . Lists and dictionaries are also types. . Explanation of what the code does: . I first added three entries into the dictionary. Keys include FirstName, LastName, and some others that I created, such as Hobbies and Sports played. . I used a for loop to print the records from the dictionary. The for loop ranges from 0 to the length of the dictionary, in this example, 2. I then printed each record by printing the index of the dictionary (InfoDb[i]), starting from 0, then 1 and finally 2. . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Lily&quot;, &quot;LastName&quot;: &quot;Wu&quot;, &quot;DOB&quot;: &quot;July 24&quot;, &quot;Favorite books&quot;: [&quot;Salt to the Sea&quot;, &quot;Sherlock Holmes&quot;], &quot;Favorite food&quot;: &quot;Shrimp&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Giannina&quot;, &quot;LastName&quot;: &quot;Ortega Rico&quot;, &quot;DOB&quot;: &quot;March 9&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;none&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;, &quot;watching TV&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Doe&quot;, &quot;DOB&quot;: &quot;January 1&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;Rice&quot;, &quot;Hobbies&quot;: [&quot;Youtube&quot;, &quot;Wasting time 🤪&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Birthday 🥳:&quot;, d_rec[&quot;DOB&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Favorite books: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Favorite books&quot;])) print(&quot; t&quot;, &quot;Favorite food:&quot;, d_rec[&quot;Favorite food&quot;]) print(&quot; t&quot;, &quot;Hobbies: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Hobbies&quot;])) print(&quot; t&quot;, &quot;Sports played: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Sports played&quot;])) def for_loop(): for i in range(len(InfoDb)): record = InfoDb[i] print_data(record) return for_loop() . Lily Wu Birthday 🥳: July 24 Favorite books: Salt to the Sea, Sherlock Holmes Favorite food: Shrimp Hobbies: Reading Sports played: none Giannina Ortega Rico Birthday 🥳: March 9 Favorite books: none Favorite food: none Hobbies: Reading, watching TV Sports played: none John Doe Birthday 🥳: January 1 Favorite books: none Favorite food: Rice Hobbies: Youtube, Wasting time 🤪 Sports played: none . For loop without index . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Lily&quot;, &quot;LastName&quot;: &quot;Wu&quot;, &quot;DOB&quot;: &quot;July 24&quot;, &quot;Favorite books&quot;: [&quot;Salt to the Sea&quot;, &quot;Sherlock Holmes&quot;], &quot;Favorite food&quot;: &quot;Shrimp&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Giannina&quot;, &quot;LastName&quot;: &quot;Ortega Rico&quot;, &quot;DOB&quot;: &quot;March 9&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;none&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;, &quot;watching TV&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Doe&quot;, &quot;DOB&quot;: &quot;January 1&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;Rice&quot;, &quot;Hobbies&quot;: [&quot;Youtube&quot;, &quot;Wasting time 🤪&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Birthday 🥳:&quot;, d_rec[&quot;DOB&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Favorite books: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Favorite books&quot;])) print(&quot; t&quot;, &quot;Favorite food:&quot;, d_rec[&quot;Favorite food&quot;]) print(&quot; t&quot;, &quot;Hobbies: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Hobbies&quot;])) print(&quot; t&quot;, &quot;Sports played: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Sports played&quot;])) def for_loop(): for record in InfoDb: print_data(record) for_loop() . . Lily Wu Birthday 🥳: July 24 Favorite books: Salt to the Sea, Sherlock Holmes Favorite food: Shrimp Hobbies: Reading Sports played: none Giannina Ortega Rico Birthday 🥳: March 9 Favorite books: none Favorite food: none Hobbies: Reading, watching TV Sports played: none John Doe Birthday 🥳: January 1 Favorite books: none Favorite food: Rice Hobbies: Youtube, Wasting time 🤪 Sports played: none . While loop . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Lily&quot;, &quot;LastName&quot;: &quot;Wu&quot;, &quot;DOB&quot;: &quot;July 24&quot;, &quot;Favorite books&quot;: [&quot;Salt to the Sea&quot;, &quot;Sherlock Holmes&quot;], &quot;Favorite food&quot;: &quot;Shrimp&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Giannina&quot;, &quot;LastName&quot;: &quot;Ortega Rico&quot;, &quot;DOB&quot;: &quot;March 9&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;none&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;, &quot;watching TV&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Doe&quot;, &quot;DOB&quot;: &quot;January 1&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;Rice&quot;, &quot;Hobbies&quot;: [&quot;Youtube&quot;, &quot;Wasting time 🤪&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Birthday 🥳:&quot;, d_rec[&quot;DOB&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Favorite books: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Favorite books&quot;])) print(&quot; t&quot;, &quot;Favorite food:&quot;, d_rec[&quot;Favorite food&quot;]) print(&quot; t&quot;, &quot;Hobbies: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Hobbies&quot;])) print(&quot; t&quot;, &quot;Sports played: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Sports played&quot;])) def while_loop(): i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . . Lily Wu Birthday 🥳: July 24 Favorite books: Salt to the Sea, Sherlock Holmes Favorite food: Shrimp Hobbies: Reading Sports played: none Giannina Ortega Rico Birthday 🥳: March 9 Favorite books: none Favorite food: none Hobbies: Reading, watching TV Sports played: none John Doe Birthday 🥳: January 1 Favorite books: none Favorite food: Rice Hobbies: Youtube, Wasting time 🤪 Sports played: none . Recursive loop . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Lily&quot;, &quot;LastName&quot;: &quot;Wu&quot;, &quot;DOB&quot;: &quot;July 24&quot;, &quot;Favorite books&quot;: [&quot;Salt to the Sea&quot;, &quot;Sherlock Holmes&quot;], &quot;Favorite food&quot;: &quot;Shrimp&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Giannina&quot;, &quot;LastName&quot;: &quot;Ortega Rico&quot;, &quot;DOB&quot;: &quot;March 9&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;none&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;, &quot;watching TV&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Doe&quot;, &quot;DOB&quot;: &quot;January 1&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;Rice&quot;, &quot;Hobbies&quot;: [&quot;Youtube&quot;, &quot;Wasting time 🤪&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Birthday 🥳:&quot;, d_rec[&quot;DOB&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Favorite books: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Favorite books&quot;])) print(&quot; t&quot;, &quot;Favorite food:&quot;, d_rec[&quot;Favorite food&quot;]) print(&quot; t&quot;, &quot;Hobbies: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Hobbies&quot;])) print(&quot; t&quot;, &quot;Sports played: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Sports played&quot;])) def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return recursive_loop(0) . . Lily Wu Birthday 🥳: July 24 Favorite books: Salt to the Sea, Sherlock Holmes Favorite food: Shrimp Hobbies: Reading Sports played: none Giannina Ortega Rico Birthday 🥳: March 9 Favorite books: none Favorite food: none Hobbies: Reading, watching TV Sports played: none John Doe Birthday 🥳: January 1 Favorite books: none Favorite food: Rice Hobbies: Youtube, Wasting time 🤪 Sports played: none . Reverse database . How the code works . This mainly used my code above. What I changed was using the reversed function for the for loop, which would print InfoDb[2], then InfoDb[1], and finally InfoDb[0]. . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Lily&quot;, &quot;LastName&quot;: &quot;Wu&quot;, &quot;DOB&quot;: &quot;July 24&quot;, &quot;Favorite books&quot;: [&quot;Salt to the Sea&quot;, &quot;Sherlock Holmes&quot;], &quot;Favorite food&quot;: &quot;Shrimp&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Giannina&quot;, &quot;LastName&quot;: &quot;Ortega Rico&quot;, &quot;DOB&quot;: &quot;March 9&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;none&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;, &quot;watching TV&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Doe&quot;, &quot;DOB&quot;: &quot;January 1&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;Rice&quot;, &quot;Hobbies&quot;: [&quot;Youtube&quot;, &quot;Wasting time 🤪&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Birthday 🥳:&quot;, d_rec[&quot;DOB&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Favorite books: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Favorite books&quot;])) print(&quot; t&quot;, &quot;Favorite food:&quot;, d_rec[&quot;Favorite food&quot;]) print(&quot; t&quot;, &quot;Hobbies: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Hobbies&quot;])) print(&quot; t&quot;, &quot;Sports played: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Sports played&quot;])) def for_loop_reverse(): for i in reversed(range(len(InfoDb))): record = InfoDb[i] print_data(record) return for_loop_reverse() . John Doe Birthday 🥳: January 1 Favorite books: none Favorite food: Rice Hobbies: Youtube, Wasting time 🤪 Sports played: none Giannina Ortega Rico Birthday 🥳: March 9 Favorite books: none Favorite food: none Hobbies: Reading, watching TV Sports played: none Lily Wu Birthday 🥳: July 24 Favorite books: Salt to the Sea, Sherlock Holmes Favorite food: Shrimp Hobbies: Reading Sports played: none . Add your own record to the database . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Lily&quot;, &quot;LastName&quot;: &quot;Wu&quot;, &quot;DOB&quot;: &quot;July 24&quot;, &quot;Favorite books&quot;: [&quot;Salt to the Sea&quot;, &quot;Sherlock Holmes&quot;], &quot;Favorite food&quot;: &quot;Shrimp&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Giannina&quot;, &quot;LastName&quot;: &quot;Ortega Rico&quot;, &quot;DOB&quot;: &quot;March 9&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;none&quot;, &quot;Hobbies&quot;: [&quot;Reading&quot;, &quot;watching TV&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Doe&quot;, &quot;DOB&quot;: &quot;January 1&quot;, &quot;Favorite books&quot;: [&quot;none&quot;], &quot;Favorite food&quot;: &quot;Rice&quot;, &quot;Hobbies&quot;: [&quot;Youtube&quot;, &quot;Wasting time 🤪&quot;], &quot;Sports played&quot;: [&quot;none&quot;] }) print(&quot;Enter your info below!&quot;) firstName = input(&quot;First name?&quot;) print(&quot;First name? &quot; + firstName) lastName = input(&quot;Last name?&quot;) print(&quot;Last name? &quot; + lastName) bday = input(&quot;Birthday?&quot;) print(&quot;Birthday? &quot; + bday) book = input(&quot;Favorite books?&quot;) print(&quot;Favorite books? &quot; + book) food = input(&quot;Favorite foods?&quot;) print(&quot;Favorite foods? &quot; + food) hobby = input(&quot;Hobbies?&quot;) print(&quot;Hobbies? &quot; + hobby) sport = input(&quot;Sports played?&quot;) print(&quot;Sports played&quot; + sport) InfoDb.append({ &quot;FirstName&quot;: firstName, &quot;LastName&quot;: lastName, &quot;DOB&quot;: bday, &quot;Favorite books&quot;: [book], &quot;Favorite food&quot;: food, &quot;Hobbies&quot;: [hobby], &quot;Sports played&quot;: [sport] }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Birthday 🥳:&quot;, d_rec[&quot;DOB&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Favorite books: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Favorite books&quot;])) print(&quot; t&quot;, &quot;Favorite food:&quot;, d_rec[&quot;Favorite food&quot;]) print(&quot; t&quot;, &quot;Hobbies: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Hobbies&quot;])) print(&quot; t&quot;, &quot;Sports played: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Sports played&quot;])) def for_loop(): for i in range(len(InfoDb)): record = InfoDb[i] print_data(record) return for_loop() . Enter your info below! First name? Lily&#39;s Last name? Clone Birthday? July 24 Favorite books? lol Favorite foods? Rice Hobbies? Programming Sports playedNone Lily Wu Birthday 🥳: July 24 Favorite books: Salt to the Sea, Sherlock Holmes Favorite food: Shrimp Hobbies: Reading Sports played: none Giannina Ortega Rico Birthday 🥳: March 9 Favorite books: none Favorite food: none Hobbies: Reading, watching TV Sports played: none John Doe Birthday 🥳: January 1 Favorite books: none Favorite food: Rice Hobbies: Youtube, Wasting time 🤪 Sports played: none Lily&#39;s Clone Birthday 🥳: July 24 Favorite books: lol Favorite food: Rice Hobbies: Programming Sports played: None . Learning . The purpose of lists and dictionaries are to collect information. . Add to dictionaries with .append(). . Dictionaries consist of key/value pairs. For example, &quot;FirstName&quot; is a key, while &quot;Lily&quot; is a value. . Application Programming Interface: Also known as API, it is the process in which data is shared between programs. Lists and dictionaries are the first step to learning about databases. . Code that I learned . d_rec: Stands for dictionary record. You can use it to call the specific information in the dictionary. . For example, print(d_rec[&quot;FirstName&quot;]) would print the specific value in the dictionary of the FirstName key. .",
            "url": "https://lwu1822.github.io/CSP-fastpages/python/2022/09/05/w2-dictionary.html",
            "relUrl": "/python/2022/09/05/w2-dictionary.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Python Quiz",
            "content": "Explanation of code . I imported the getpass and sys library. The quiz first recognizes the user&#39;s username and path to the Python interpreter. . The quiz then asks a few questions and answers, which are included in a list. Using the for loop, I can use recursion to iterate through each index in the list. . import getpass,sys print(&quot;Welcome &quot; + getpass.getuser() + &quot;. Your Python interpreter is currently running on the path: &quot; + sys.executable) questions = [&quot;What is the name for code that does not change every time you run the program?&quot;, &quot;What is the Python command that allows user input?&quot;, &quot;What do you use to combine different data types within the print statement?&quot;, &quot;def foo(bar): What is bar also known as?&quot;, &quot;What comparison operator do you use in Python to test if two values are equal to each other?&quot;, &quot;What command is used to include other functions that were previously developed?&quot;, &quot;What command is used to evaluate correct or incorrect response in this example?&quot;, &quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;] answers = [&quot;static text&quot;, &quot;input&quot;, &quot;concatenation&quot;, &quot;parameter&quot;, &quot;==&quot;, &quot;import&quot;, &quot;if&quot;, &quot;expression&quot;] questionNum = len(questions) score = 0 for i in range(questionNum): print(questions[i]) # This is solely so that the user can see the questions in the Jupyter Notebook output response = input(questions[i]) print(&quot;Answer: &quot; + response) # Again, to show the output if response == answers[i]: print(&quot;Correct!&quot;) score += 1 else: print(&quot;Incorrect! The correct answer is: &quot; + answers[i]) print(&quot;Your total score is: &quot; + str(score) + &quot; out of &quot; + str(questionNum)) . Welcome lwu1822. Your Python interpreter is currently running on the path: /home/lwu1822/anaconda3/bin/python What is the name for code that does not change every time you run the program? Answer: static text Correct! What is the Python command that allows user input? Answer: input Correct! What do you use to combine different data types within the print statement? Answer: ? Incorrect! The correct answer is: concatenation def foo(bar): What is bar also known as? Answer: parameter Correct! What comparison operator do you use in Python to test if two values are equal to each other? Answer: == Correct! What command is used to include other functions that were previously developed? Answer: import Correct! What command is used to evaluate correct or incorrect response in this example? Answer: if Correct! Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition? Answer: ? Incorrect! The correct answer is: expression Your total score is: 6 out of 8 . How the rest of this post will be structured . This post captures my learnings from this page. . I will first document my learnings, and then display the code and its output below. . . In programming languages, a lot of the things within parenthesis are called parameters. . For example, in the code below, Hello World! would be an argument. . Static text: Text that stays the same. . print(&quot;Hello World!&quot;) . Hello World! . . Input and output . This is known as dynamic, versus static. Dynamic means that a variable can change each time you run the code. For example, each time you run the code, the input could change. . In Python code, the things specified in parenthesis are known as parameters. For example, in the code below, usr_input is a parameter. . usr_input = input(&quot;Enter some text: &quot;) print(usr_input) . hi :) . . Function . Note: Indentation matters in Python . When creating a function, make sure to indent to tell Python which lines of code belong within the function (since Python does not use curly braces to delineate functions). . Functions are created with the def keyword. . def addNum(a, b): return int(a) + int(b) num1 = input(&quot;Enter 1st number: &quot;) print(&quot;Enter 1st number: &quot; + num1) num2 = input(&quot;Enter 2nd number: &quot;) print(&quot;Enter 2nd number: &quot; + num2) total = addNum(num1, num2) print(&quot;Your total is: &quot; + str(total)) . Enter 1st number: 1 Enter 2nd number: 2 Your total is: 3 . . Libraries . Libraries can be imported with the - you guessed it - import function. . Examples of libraries include getpass and sys. . import getpass import sys print(&quot;You are: &quot; + getpass.getuser()) print(&quot;Your Python interpreter is running at the file path: &quot; + sys.executable) passwd = getpass.getpass(prompt=&#39;Enter the password. Hint: what language does this program run in? &#39;) print(&quot;Enter the password. Hint: what language does this program run in? &quot;) print(passwd) if passwd == &quot;python&quot;: print(&quot;Welcome! &quot; + getpass.getuser()) else: print(&quot;Incorrect!&quot;) . You are: lwu1822 Your Python interpreter is running at the file path: /home/lwu1822/anaconda3/bin/python Enter the password. Hint: what language does this program run in? python Welcome! lwu1822 .",
            "url": "https://lwu1822.github.io/CSP-fastpages/python/2022/09/05/w1-python-quiz.html",
            "relUrl": "/python/2022/09/05/w1-python-quiz.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Tools",
            "content": "Basic commands . ls: Lists the contents in the current directory . cd [file path]: Move to a directory . pwd: List your current directory . echo &quot;Moving to home directory with the cd command&quot; cd echo &quot;What directory am I in?&quot; pwd echo &quot;Moving to my vscode directory&quot; cd /home/lwu1822/vscode echo &quot;What directory am I in?&quot; pwd echo &quot;What files are within this directory?&quot; ls . Moving to home directory with the cd command What directory am I in? /home/lwu1822 Moving to my vscode directory What directory am I in? /home/lwu1822/vscode What files are within this directory? APCSA APCSP fastpages spring_portfolio test . Variables . To create variables, simply assign a value to a variable name. . Ex: x=5 . Reference variables with $[var] . text=&quot;Hello World!&quot; echo &quot;$text&quot; . Hello World! . Note: Single and double quotes are different! . See example below . text=&quot;Hello World!&quot; echo &quot;$text&quot; echo &#39;$text&#39; . Hello World! $text . . What does export do? . While going through the Bash Tutorial, I noticed that variables were declared with the export command, ex: export x=5. . I wondered what the difference was between export, and straight up declaring the variable, like this: x=5. . The answer is simple. Quoting from Super User (a community in Stack Exchange), &quot;Exported variables get passed on to child processes, not-exported variables do not.&quot; . Python versions . python --version python2 --version . Python 3.9.12 Python 2.7.18 . Playing with some Regex . echo &quot;Check for packages starting with &#39;j&#39; and ends with the letter &#39;s&#39;&quot; # What this bash script does: # Checks if there is output after grep (searching) for packages starting # with &#39;j&#39; and ending with &#39;s&#39; # First lists all conda packages, then filters to only show the package # names (excludes Version and Build Channel) with the cut command # The grep command uses some fun Regex # ^ means that the character following it (in parenthesis) must start at the # beginning # .*: &quot;.&quot;&quot; means any character, &quot;*&quot; means match the character before it # any number of times -&gt; &quot;.*&quot; means match any character any number of times # $: Character before it (s) must be at the end if conda list | cut -d &quot; &quot; -f 1 | grep &quot;^j.*s$&quot; ; then : else echo &quot;No packages starting with &#39;j&#39; and ending with &#39;s&#39;&quot; fi . Check for packages starting with &#39;j&#39; and ends with the letter &#39;s&#39; jupyterlab_pygments jupyterlab_widgets . Jupyter Check . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: bash /home/lwu1822/.local/share/jupyter/kernels/bash java /home/lwu1822/.local/share/jupyter/kernels/java javascript /home/lwu1822/.local/share/jupyter/kernels/javascript python3 /home/lwu1822/anaconda3/share/jupyter/kernels/python3 . Conda check for Jupyter . conda list | grep jupyter . jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . (I have checked Slack :)) . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$check&quot; fi . python3 /home/lwu1822/anaconda3/share/jupyter/kernels/python3 . . Directories . Check if the APCSP repo exists in /home/lwu1822/vscode/hack. If not, clone the APCSP repo into the directory. . cd /home/lwu1822/vscode/hack if [ ! -d APCSP ] ; then echo &quot;APCSP repo does not exist in this directory&quot; echo &quot;Cloning APCSP repo&quot; git clone &quot;https://github.com/nighthawkcoders/APCSP.git&quot; else echo &quot;APCSP repo does exist in this directory&quot; fi . APCSP repo does not exist in this directory Cloning APCSP repo Cloning into &#39;APCSP&#39;... remote: Enumerating objects: 10655, done. remote: Counting objects: 100% (2230/2230), done. remote: Compressing objects: 100% (774/774), done. remote: Total 10655 (delta 1382), reused 2178 (delta 1331), pack-reused 8425 Receiving objects: 100% (10655/10655), 17.37 MiB | 2.26 MiB/s, done. Resolving deltas: 100% (5877/5877), done. . . Check again to see if APCSP directory exists. . cd /home/lwu1822/vscode/hack echo &quot;Listing /home/lwu1822/vscode/hack&quot; ls echo &quot;Does APCSP repo exist in this directory?&quot; if [ ! -d APCSP ] ; then echo &quot;APCSP repo does not exist in this directory&quot; echo &quot;Cloning APCSP repo&quot; git clone &quot;https://github.com/nighthawkcoders/APCSP.git&quot; else echo &quot;APCSP repo does exist in this directory&quot; fi . . Listing /home/lwu1822/vscode/hack APCSP foo.sh test.sh Does APCSP repo exist in this directory? APCSP repo does exist in this directory . . Hacks . To verify tools: . For many packages, you can type the name of the package and then --version, or you can grep from the dpkg -l list . python --version dpkg -l | cut -d &quot; &quot; -f 3 | grep -E &quot;^(python)([0-9])+$&quot; . Python 3.9.12 python2 python3 . To verify Conda, you can use the conda list command. I&#39;m not going to do this here because the output is huge, but you can see above where I used regex and grep to search for the specific things I want . To update a repository, first move into the directory of your repository, and update with git pull origin master. . main_dir=vscode/ fastpages_dir=CSP-fastpages/ cd cd $main_dir/$fastpages_dir ls # git pull origin master . 2022-05-15-07-21-16.png README.md _notebooks assets 2022-05-15-07-24-25.png _action_files _pages docker-compose.yml 2022-05-15-07-25-15.png _config.yml _plugins images Gemfile _fastpages_docs _posts index.html LICENSE _includes _sass Makefile _layouts _word . . Automation . I&#39;m not going to run the code cell, because Bash input doesn&#39;t work in Jupyter Notebook for some reason. I&#39;ll attach a picture though, to show that it works . echo &quot;What package would you like to check? Make sure to type out the full exact name of the package, as it would show in dpkg -l output&quot; read pkg if dpkg -l | grep $pkg &gt;/dev/null 2&gt;&amp;1 ; then echo &quot;Package is installed!&quot; else echo &quot;Would you like to install the package? y/n&quot; read install if [ $install == &quot;y&quot; ] ; then echo &quot;Installing&quot; apt-get install -y $pkg else echo &quot;Alright then!&quot; fi fi . .",
            "url": "https://lwu1822.github.io/CSP-fastpages/bash/2022/09/05/tools.html",
            "relUrl": "/bash/2022/09/05/tools.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "APEL Notes",
            "content": "APEL . There are three areas of writing that APEL focuses on: rhetorical analysis, synthesis, and argumentative. . In Tri 1, we are learning rhetorical analysis. . Rhetorical analysis . Thesis . According to Collegeboard’s rubric, the thesis can be located anywhere within your essay. However, it is suggested to write your thesis somewhere in the intro paragraph, preferably as the last sentence. . The thesis must consist of two parts: a purpose verb and the author’s message .",
            "url": "https://lwu1822.github.io/CSP-fastpages/apel/2022/09/05/apel.html",
            "relUrl": "/apel/2022/09/05/apel.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "HTML and CSS",
            "content": "I changed the theme from minima to minimal . . Overall, the minimal theme looked pretty similar to the minima theme. However, there were some problems with the new theme. . For some reason, when my window is maximized, the contents on the webpage are displayed incorrectly. . . But when I shrink my window, the contents are fine. . . I’m not sure why that is the case. Maybe if I have time, I’ll look into it. . . I reverted the theme back to minima. However, I wanted to change the background to something cool, maybe like a gradient. I used Vunsh’s blog as a starting point and used his dark mode .scss file (thanks!). Then, I changed the background color to a gradient using the linear-gradient command within the html, body, input, textarea, select, button block. . That’s pretty much all I changed. Looking at the .scss file, there were many parts of the code that I didn’t understand. By commenting and uncommenting each block of code, I was able to learn what they did. Here are my comments on some of the code. . . Some thoughts . I like the new theme, but I think there’s some things that I could change. . For instance, I don’t really like the font colors for the code here: . . However, this class isn’t mainly focused around CSS, so I’ll probably change the font colors only if I have time. .",
            "url": "https://lwu1822.github.io/CSP-fastpages/html/2022/09/05/2_html-css.html",
            "relUrl": "/html/2022/09/05/2_html-css.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "HTML test",
            "content": "bolded text . bolded text with the b tag . italics . italics with i tag . underline . strikethrough strikethrough with del tag . H2O . x2 . . .",
            "url": "https://lwu1822.github.io/CSP-fastpages/test/2022/09/04/html-md-test.html",
            "relUrl": "/test/2022/09/04/html-md-test.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Jekyll and Liquid",
            "content": "this took me hours to research btw . While I was setting up my fastpages blog, I noticed this interesting line of code in index.html. . . And I thought, hey, this is interesting, what does {{site.baseurl}} do? . After some googling, I found that {{site.baseurl}} wasn’t something in Markdown. Turns out it’s actually Jekyll syntax. . So what does {{site.baseurl}} do? . Basically, baseurl is the directory under the URL of the website. 1 So for example, this blog’s URL is lwu1822.github.io, and the baseurl is CSP-fastpages. . So instead of typing out ![](lwu1822.github.io/CSP-fastpages/images/diagram.png), I can instead just do ![]({{site.baseurl}}/images/diagram.png). Saves a lot of typing. . Pretty cool, huh? 😊 . . Something else I encountered while making this post . To type {{site.baseurl}} in this Markdown file, apparently you have to use the {% raw %} and {% endraw %} template around {{site.baseurl}} . 2 . Like this: . {% raw %} {{site.baseurl}} {% endraw %} . . Also something I encountered just as I was writing the line above . Notice how I was able to write {% endraw %} above? Unfortunately, it’s not that simple to just type it directly into your IDE, like this: . :warning: Warning: Don’t do this, it will break your code: . {% raw %} {% endraw %} {% endraw %} . The reason is because the first {% endraw %} will be interpreted as ending the {% raw %} template. . So if you want to be able to type {% endraw %} in Markdown, you need to do the following 3: . Create a variable, in this example, I’ll name it openTag, and assign it to {%: . {% assign openTag = &#39;{%&#39; %} . | Use the {{ openTag }} variable anytime you want to type text that contains {% in it. . For example, to type the text {% endraw %}, you would do: . {{ openTag }} endraw %} . | . Even more something that I learned . Apparently, you also can’t type {% directly in the IDE, which would also break your code (took me a long time to debug （ꐦ𝅒_𝅒）) . Instead, you have to type: {{ openTag }} . . Things for me to contemplate on: . I noticed on the provided Fastpages Notebook Blog Post, you can add an image without the baseurl. For example, you can specify an image with ![](images/diagram.png). Not sure why that works, but I’m guessing it has something to with Jupyter Notebooks. . . baseurl &#8617; . | Liquid template language &#8617; . | I took the steps from here but quite frankly, I found the explanation a little confusing, so I simplified it as much as I could in this blog &#8617; . |",
            "url": "https://lwu1822.github.io/CSP-fastpages/jekyll-liquid/2022/08/31/jekyll-liquid.html",
            "relUrl": "/jekyll-liquid/2022/08/31/jekyll-liquid.html",
            "date": " • Aug 31, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://lwu1822.github.io/CSP-fastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post9": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://lwu1822.github.io/CSP-fastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  
      ,"page0": {
          "title": "About Me",
          "content": "Hi, and welcome to my blog! . My name is Lily Wu. I’m a junior at Del Norte High School. . My interests are in STEM, including programming, cybersecurity, and math. . I’m passionate about learning, and I love to play around and explore code. . I don’t know if this is a good thing, but I have a bad habit of falling down a rabbit hole as I look up what each code syntax does specifically. . 9/2/2022: Currently falling down the rabbit hole learning Jekyll and Liquid . I have some experience in C++, and am currently learning Python and Java. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://lwu1822.github.io/CSP-fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page1": {
          "title": "Notes",
          "content": "This page will mainly be for capturing my learning on Python, which is the main language that we will be learning for AP CSP. . I will also be linking my notes on other programming languages at the of bottom this page. . If you would like to see what I did for each week’s assignments, click here . Links . Jekyll and Liquid .",
          "url": "https://lwu1822.github.io/CSP-fastpages/notes/",
          "relUrl": "/notes/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Weekly Work",
          "content": "Week Assignments . 0 | First post Python | . 1 | Bash: Check if tools are installed | . 2 | Dictionary HTML and CSS | .",
          "url": "https://lwu1822.github.io/CSP-fastpages/weekly-work/",
          "relUrl": "/weekly-work/",
          "date": ""
      }
      
  

  

  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page13": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://lwu1822.github.io/CSP-fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}